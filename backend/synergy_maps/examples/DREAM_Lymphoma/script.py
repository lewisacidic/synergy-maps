import numpy as np
import pandas as pd
import skchem as skc

from skchem.descriptors import skchemize
from skchem.target_prediction import PIDGIN

from rdkit.Chem.rdMolDescriptors import GetMorganFingerprintAsBitVect as morg

from sklearn.decomposition import PCA
from sklearn.manifold import MDS

from synergy_maps import (
    SynergyMap,
    RepresentationType,
    ActivityType,
    ReductionMethod,
    SynergyType,
    TSNE
)

import os

DIRNAME = os.path.dirname(os.path.abspath(__file__))

def make_map():

    # representation types
    morg2 = RepresentationType(name='morg2',
        representation_func=skchemize(morg, radius=2, nBits=2048),
        metadata="""Hashed Circular fingerprint generated by the Morgan algorithm, """
            """implemented in <a href="http://www.rdkit.org">RDKit</a>. <br/>"""
            """Parameters used: Radius = 2, Bit length = 2048""")

    targets = RepresentationType(name='targets',
        representation_func=PIDGIN(),
        metadata="""Bayes affinity fingerprint for 1080 human targets, produced """
        """using the <a href="https://github.com/lhm30/PIDGIN">PIDGIN (Prediction of targets IncluDinG INactives)</a>"""
        """Target Prediction algorithm, implemented in <a href="https://github.com/richlewis42/scikit-chem">scikit-chem</a>.""")

    random = RepresentationType(name='random',
        representation_func=lambda m: pd.Series(np.random.random(100)),
        metadata="""Uniformly distributed random feature vector of length 100"""
        """implemented using <a href="http://www.numpy.org">numpy</a> <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html#numpy.random.random">random</a> module""")


    representation_types = [ morg2, targets, random ]

    # reduction types
    pca = ReductionMethod(name='PCA',
        model=PCA(n_components=2),
        metadata="""<a href="http://en.wikipedia.org/wiki/Principal_component_analysis">Principal component analysis</a> implemented in <a href="http://scikit-learn.org/stable/" target="_blank">scikit-learn</a>\n"""
        """<br/>Default parameters used.""")


    mds = ReductionMethod(name='MDS',
        model=MDS(),
        metadata=
            """<a href="http://en.wikipedia.org/wiki/Multidimensional_scaling" target="_blank">Multidimensional Scaling</a> implemented in <a href="http://scikit-learn.org/stable/" target="_blank">scikit-learn</a>"""
        """<br/>Default parameters used.""")


    tsne = ReductionMethod(name='t-SNE',
        model=TSNE(perplexity=1),
        metadata=
            """<a href="http://lvdmaaten.github.io/tsne/">Student's t-distributed stochastic neighbour embedding</a>, """
            """implemented according to <a href="http://lvdmaaten.github.io/publications/papers/JMLR_2008.pdf">van der Maartin et al. 2008</a>\n"""
            """<br/>Parameters used: Perplexity = 1, theta=0""")

    reduction_types = [ pca, mds, tsne ]

    # activity types
    pIC20 = ActivityType(name='pIC20', metadata=
        """negative based-10 logarithm of the <a href="http://en.wikipedia.org/wiki/IC50">IC20</a>, the concentation of"""
        """compound required for 20% inhibition of growth of Lymphoma cells""")

    IC20 = ActivityType(name='IC20', metadata=
        """<a href="http://en.wikipedia.org/wiki/IC50">IC20</a>, the concentation of"""
        """compound required for 20% inhibition of growth of Lymphoma cells""")

    activity_types = [ pIC20, IC20 ]

    # synergy types
    excessOverBliss = SynergyType(name='ExcessOverBliss', metadata=
        """Difference in observed vs expected activity of the component compounds,"""
        """each at the IC20 concentration (when known) assuming the <a href="http://doi.wiley.com/10.1111/j.1744-7348.1939.tb06990.x">Bliss Independence model</a>""")

    synergy_types = [ excessOverBliss ]

    # data
    compound_df = skc.read_smiles(os.path.join(DIRNAME, 'compounds.smiles'), name_column=1, title_line=True)
    compound_df['pIC20'] = -np.log10(compound_df['IC20'])

    combination_df = pd.read_csv(os.path.join(DIRNAME, 'combinations.csv'))
    combination_df.set_index('id', inplace=True)

    synergy_map = SynergyMap(compound_df=compound_df,
        combination_df=combination_df,
        representation_types=representation_types,
        reduction_types=reduction_types,
        activity_types=activity_types,
        synergy_types=synergy_types,
        metadata='DREAM Drug Combination Challenge Data')

    return synergy_map

if __name__ == "__main__":

    outpath = os.path.abspath(
                os.path.join(
                    DIRNAME,
                    '../../../../frontend/app/data/DREAM-Lymphoma/data_trial.json'))

    sm = make_map()
    with open(outpath) as f:
        f.writelines(sm.to_json())
