from collections import defaultdict
import networkx as nx

class SynergyMap(object):
    
    """

    A synergy map class created from combination and chemical data. 
    Generates a JSON file required for the web app to display the map.
   
    """

    def __init__(self, 
        compound_df=None, 
        combination_df=None, 
        activity_types=[], 
        synergy_types=[], 
        representation_types=[], 
        reduction_methods=[],
        metadata=None):
       
        """
       
            Create a synergy map object.

            arguments:

            compound_df:
             -  compound scikit-chem dataframe

            combination_df:
             -  combination dataframe

            activity_types:
             -  a list of activities that are present in the compound dataframe

            synergy_types:
             -  a list of synergies present in the combination dataframe
            
            representations:
             -  a list of representations to use

            reductions_methods:
             -  a list of reduction methods to use 

            metadata:
             -  a string description of the dataset

        """

        self.compounds = compound_df
        self.combinations = combination_df

        self.representation_types = representation_types
        self.reduction_methods = reduction_methods
        self.activity_types = activity_types
        self.synergy_types = synergy_types

        self.metadata = metadata

    def _generate_metadata(self):

        """draw the metadata out of all objects, to make single metadata file"""

        self.dataset_metadata = {
            'representations': {rep.name: rep.metadata for rep in self.representation_types},
            'reduction_methods': {red.name: red.metadata for red in self.reduction_methods},
            'activity_types': {act.name: act.metadata for act in self.activity_types},
            'synergy_types': {syn.name: syn.metadata for syn in self.synergy_types},
            'dataset': self.metadata
        }

    def _generate_coordinates(self):

        """
            iterate through every combination of representation type and 
            reduction method, applying them and saving the resultant dataframes 
            in the coordinates dictionary
        """
        self.coordinates = defaultdict(dict)

        for rep in self.representation_types:
            for red in self.reduction_methods:
                self.coordinates[rep.name][red.name] = red(rep(self.compounds))

    def _generate_graph(self):

        '''create networkX graph'''

        g = nx.Graph()
        g.add_nodes_from((idx, row) for (idx, row) in self.compounds.iterrows())
        g.add_edges_from((rows['ColId'], rows['RowId'], rows.drop(['ColId', 'RowId'])) \
            for (idx, rows) in self.combinations.iterrows())
        print g
        self.graph = g


    def to_json(self):

        """

            Generate a JSON representation from the constructed Synergy Map.
        
        """
        
        return ''



if __name__ == '__main__':

    import skchem
    from rdkit.Chem.rdMolDescriptors import GetMorganFingerprintAsBitVect as morg
    from synergy_maps import *
    from sklearn.decomposition import PCA
    from sklearn.manifold import MDS
    import sys

    sys.stdout.write('Making representations:')

    sys.stdout.write(' [ ')
    sys.stdout.write('random')
    random = RepresentationType(name='random',
        representation_func=lambda m: pd.Series(np.random.random(100)),
        metadata="""Uniformly distributed between 0 and 1 random feature vector, """ 
        """implemented using numpy random module""")
    sys.stdout.write(', morg2')
    morg2 = RepresentationType(name='morg2', 
        representation_func=skchem.skchemize(morg, radius=2, nBits=2048),
        metadata="""Hashed Circular fingerprint generated by the Morgan algorithm, """
            """implemented in RDKit. """
            """Radius = 2, Bit length = 2048""")

    sys.stdout.write(' ] ')

    representation_types = [ random, morg2 ]

    sys.stdout.write('...OK\n')
    # reduction methods    

    sys.stdout.write('Making reduction methods: ')

    sys.stdout.write(' [ ')

    sys.stdout.write('PCA')
    pca = ReductionMethod(name='PCA',  
        model=PCA(n_components=2), 
        metadata="""Principal component analysis implemented in scikit-learn""")

    sys.stdout.write(', MDS')

    mds = ReductionMethod(name='MDS',
        model=MDS(),
        metadata=
            """MultiDimensional Scaling implemented in scikit-learn""")

    sys.stdout.write(', TSNE')

    tsne = ReductionMethod(name='t-SNE',
        model=TSNE(perplexity=1),
        metadata=
            """Student's t-distributed stochastic neighbour embedding, """
            """implemented according to van der Maartin et al. 2014"""
            """Perplexity = 40, theta=0""")

    sys.stdout.write(' ] ')

    reduction_methods = [ pca, mds, tsne ]

    sys.stdout.write('...OK\n')

    # activity types
    sys.stdout.write('Making Activity Types:')

    sys.stdout.write(' [ ')

    sys.stdout.write('pIC20')
    pIC20 = ActivityType(name='pIC20', metadata=
        """negative based-10 logarithm of the IC20, the concentation of"""
        """compound required for 20% inhibition""")

    sys.stdout.write(' ] ')

    activity_types = [ pIC20 ]

    sys.stdout.write('...OK\n')

    # synergy types
    sys.stdout.write('Making Synergy Types:')

    sys.stdout.write(' [ ')

    sys.stdout.write('Excess Over Bliss')
    excessOverBliss = SynergyType(name='Excess over Bliss', metadata=
        """Difference in observed vs expected activity at compounds IC20, """
        """assuming the Bliss Independence model""")

    sys.stdout.write(' ] ')

    synergy_types = [ excessOverBliss ]

    sys.stdout.write('...OK\n')

    # data
    sys.stdout.write('Reading in compounds:')
    compound_df = skchem.read_smiles('/Users/RichLewis/Git/Synergy-Maps/backend/synergy_maps/examples/DREAM_Lymphoma/compounds.smiles')
    compound_df.set_index('id', inplace=True)
    sys.stdout.write('...OK\n')

    sys.stdout.write('Reading in combinations:')
    combination_df = pd.read_csv('/Users/RichLewis/Git/Synergy-Maps/backend/synergy_maps/examples/DREAM_Lymphoma/combinations.csv')
    combination_df.set_index('id', inplace=True)
    sys.stdout.write('...OK\n')

    sm = SynergyMap(compound_df=compound_df,
        combination_df=combination_df,
        representation_types=representation_types,
        reduction_methods=reduction_methods,
        activity_types=activity_types,
        synergy_types=synergy_types)

    sm._generate_coordinates()
    sm._generate_graph()
    sm._generate_metadata()
    print sm.coordinates
    print sm.dataset_metadata