
import skchem
from rdkit.Chem.rdMolDescriptors import GetMorganFingerprintAsBitVect as morg
from synergy_maps import *
from sklearn.decomposition import PCA
from sklearn.manifold import MDS
import sys
import numpy as np


def make_map():

    sys.stdout.write('Making representations:')

    sys.stdout.write(' [ ')
    sys.stdout.write('random')
    random = RepresentationType(name='random',
        representation_func=lambda m: pd.Series(np.random.random(100)),
        metadata="""Uniformly distributed random feature vector of length 100""" 
        """implemented using <a href="http://www.numpy.org">numpy</a> <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html#numpy.random.random">random</a> module""")
    
    sys.stdout.write(', morg2')
    morg2 = RepresentationType(name='morg2', 
        representation_func=skchem.skchemize(morg, radius=2, nBits=2048),
        metadata="""Hashed Circular fingerprint generated by the Morgan algorithm, """
            """implemented in <a href="http://www.rdkit.org">RDKit</a>. <br/>"""
            """Parameters used: Radius = 2, Bit length = 2048""")

    sys.stdout.write(' ] ')

    representation_types = [ random, morg2 ]

    sys.stdout.write('...OK\n')
    # reduction types    

    sys.stdout.write('Making reduction types: ')

    sys.stdout.write(' [ ')

    sys.stdout.write('PCA')
    pca = ReductionMethod(name='PCA',  
        model=PCA(n_components=2), 
        metadata="""<a href="http://en.wikipedia.org/wiki/Principal_component_analysis">Principal component analysis</a> implemented in <a href="http://scikit-learn.org/stable/" target="_blank">scikit-learn</a>\n"""
        """<br/>Default parameters used.""")

    sys.stdout.write(', MDS')

    mds = ReductionMethod(name='MDS',
        model=MDS(),
        metadata=
            """<a href="http://en.wikipedia.org/wiki/Multidimensional_scaling" target="_blank">Multidimensional Scaling</a> implemented in <a href="http://scikit-learn.org/stable/" target="_blank">scikit-learn</a>"""
        """<br/>Default parameters used.""")

    sys.stdout.write(', t-SNE')

    tsne = ReductionMethod(name='t-SNE',
        model=TSNE(perplexity=1),
        metadata=
            """<a href="http://lvdmaaten.github.io/tsne/">Student's t-distributed stochastic neighbour embedding</a>, """
            """implemented according to <a href="http://lvdmaaten.github.io/publications/papers/JMLR_2008.pdf">van der Maartin et al. 2008</a>\n"""
            """<br/>Parameters used: Perplexity = 1, theta=0""")

    sys.stdout.write(' ] ')

    reduction_types = [ pca, mds, tsne ]

    sys.stdout.write('...OK\n')

    # activity types
    sys.stdout.write('Making Activity Types:')

    sys.stdout.write(' [ ')

    sys.stdout.write('pIC20')

    pIC20 = ActivityType(name='pIC20', metadata=
        """negative based-10 logarithm of the <a href="http://en.wikipedia.org/wiki/IC50">IC20</a>, the concentation of"""
        """compound required for 20% inhibition of growth of Lymphoma cells""")

    IC20 = ActivityType(name='IC20', metadata=
        """<a href="http://en.wikipedia.org/wiki/IC50">IC20</a>, the concentation of"""
        """compound required for 20% inhibition of growth of Lymphoma cells""")

    sys.stdout.write(' ] ')

    activity_types = [ pIC20, IC20 ]

    sys.stdout.write('...OK\n')

    # synergy types
    sys.stdout.write('Making Synergy Types:')

    sys.stdout.write(' [ ')

    sys.stdout.write('ExcessOverBliss')
    excessOverBliss = SynergyType(name='ExcessOverBliss', metadata=
        """Difference in observed vs expected activity of the component compounds,"""
        """each at the IC20 concentration (when known) assuming the <a href="http://doi.wiley.com/10.1111/j.1744-7348.1939.tb06990.x">Bliss Independence model</a>""")

    sys.stdout.write(' ] ')

    synergy_types = [ excessOverBliss ]

    sys.stdout.write('...OK\n')

    # data
    sys.stdout.write('Reading in compounds:')
    compound_df = skchem.read_smiles('/Users/RichLewis/Git/Synergy-Maps/backend/synergy_maps/examples/DREAM_Lymphoma/compounds.smiles')
    compound_df.set_index('id', inplace=True)
    compound_df['pIC20'] = -np.log10(compound_df['IC20'])
    sys.stdout.write('...OK\n')

    sys.stdout.write('Reading in combinations:')
    combination_df = pd.read_csv('/Users/RichLewis/Git/Synergy-Maps/backend/synergy_maps/examples/DREAM_Lymphoma/combinations.csv')
    combination_df.set_index('id', inplace=True)
    sys.stdout.write('...OK\n')

    sm = SynergyMap(compound_df=compound_df,
        combination_df=combination_df,
        representation_types=representation_types,
        reduction_types=reduction_types,
        activity_types=activity_types,
        synergy_types=synergy_types)

    return sm

if __name__ == "__main__":
    sm = make_map()
    with open(sys.argv[1], 'w') as f:
        f.writelines(sm.to_json())



